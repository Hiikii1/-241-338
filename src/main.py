import telebot
from telebot import types
import time
import os
import google.generativeai as genai
import requests # –û—Å—Ç–∞–≤–∏–º, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è —á–µ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ –≤ –±—É–¥—É—â–µ–º
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
BOT_TOKEN = "7578503522:AAGFv9xDSz6GzlyPcn7L2dUu2H6R3s55YVM" # –í–∞—à —Ç–æ–∫–µ–Ω
GEMINI_API_KEY = "AIzaSyBbG1xlWQyz8VTv3wV7_7Od3YzatnwRWmA" # –í–∞—à Gemini –∫–ª—é—á
# Yandex API –∫–ª—é—á –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# YANDEX_API_KEY = "YOUR_YANDEX_ROUTING_API_KEY"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Google AI SDK
gemini_configured = False
if not GEMINI_API_KEY or GEMINI_API_KEY == "YOUR_GEMINI_API_KEY":
    print("!!! –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–∫–∞–∑–∞–Ω Google AI (Gemini) API –∫–ª—é—á...")
else:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        print("Google AI (Gemini) SDK —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        gemini_configured = True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google AI (Gemini) SDK: {e}")

bot = telebot.TeleBot(BOT_TOKEN)

# --- –£–î–ê–õ–ï–ù–ò–ï WEBHOOK ---
print("–ü—ã—Ç–∞—é—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫...")
try:
    webhook_removed = bot.remove_webhook()
    if webhook_removed: print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else: print("–í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
    time.sleep(0.5)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_states = {}
user_data = {}
def set_user_state(chat_id, state): user_states[chat_id] = state; print(f"State for {chat_id} set: {state}")
def get_user_state(chat_id): return user_states.get(chat_id)
def clear_user_state(chat_id):
    user_states.pop(chat_id, None); user_data.pop(chat_id, None)
    print(f"State/data for {chat_id} cleared.")

# --- –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –ò –ü–û–õ–ù–´–ú–ò –¢–ï–ö–°–¢–ê–ú–ò) ---
texts = {
    "welcome": "–ü—Ä–∏–≤–µ—Ç. –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ª–∏–±–æ —Å –ø–æ–º–æ—â—å—é –ò–ò –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π! –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
    "questions_menu": "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", # <--- –£–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å
    "logistics_help_start": "–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π, –º–Ω–µ –Ω—É–∂–Ω—ã –¥–≤–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ.",
    "ask_ai_prompt": "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è AI (Gemini):",
    "ask_ai_processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é AI (Gemini)...",
    "ask_ai_error": "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI (Gemini). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "ask_location_1": "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É (–Ω–∞—á–∞–ª—å–Ω—É—é), –∏—Å–ø–æ–ª—å–∑—É—è –≤–ª–æ–∂–µ–Ω–∏–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.",
    "ask_location_2": "üìç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä—É—é —Ç–æ—á–∫—É (–∫–æ–Ω–µ—á–Ω—É—é), –∏—Å–ø–æ–ª—å–∑—É—è –≤–ª–æ–∂–µ–Ω–∏–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.",
    "ask_logistics_preferences": "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–µ—Ä–µ–≤–æ–∑–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∏–ø –≥—Ä—É–∑–∞, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏/—Å—Ç–æ–∏–º–æ—Å—Ç–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)? –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
    "logistics_processing": "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ–≥–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é AI (Gemini)... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
    "logistics_error": "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é AI. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
    "location_unexpected": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è.",
    "ai_unexpected": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–ø—Ä–æ—Å–∏—Ç—å —É AI', —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
    "advantages": "*–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI –∏ IoT –≤ –ª–æ–≥–∏—Å—Ç–∏–∫—É?*\n\nAI –∏ IoT –ø–æ–º–æ–≥–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã, —Å–Ω–∏–∂–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, —É–ª—É—á—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∞—Å–∞–º–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å—Ç–∞–≤–∫–∞–º.",
    "integration_steps": "*–ö–∞–∫–∏–µ —à–∞–≥–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏ IoT –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã?*\n\n–î–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏ IoT –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–±—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –Ω–∞—á–∞—Ç—å —Å –ø–∏–ª–æ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –í–∞–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
    "supply_chain": "*–ö–∞–∫ AI –∏ IoT –ø–æ–º–æ–≥–∞—é—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫?*\n\nAI –∏ IoT –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–∫—É–ø–æ–∫ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–ª–∏—à–∫–æ–≤.",
    "roi": "*–ö–∞–∫–æ–≤–∞ —Ç–∏–ø–∏—á–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI) –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ AI –∏ IoT –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ?*\n\nROI –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤ –∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤. –í—Ä–µ–º—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–∞—Å—à—Ç–∞–±–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è."
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_main_menu_keyboard(): keyboard = types.InlineKeyboardMarkup(row_width=1); btn_questions = types.InlineKeyboardButton("–ü–æ–º–æ—â—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="show_questions"); btn_logistics = types.InlineKeyboardButton("–ü–æ–º–æ—â—å —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π", callback_data="start_logistics"); keyboard.add(btn_questions, btn_logistics); return keyboard
def create_questions_menu_keyboard(): keyboard = types.InlineKeyboardMarkup(row_width=2); btn_advantages = types.InlineKeyboardButton("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ AI", callback_data="show_advantages"); btn_supply_chain = types.InlineKeyboardButton("AI –≤ —Ü–µ–ø–æ—á–∫–∞—Ö –ø–æ—Å—Ç–∞–≤–æ–∫", callback_data="show_supply_chain"); btn_integration = types.InlineKeyboardButton("–®–∞–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="show_integration_steps"); btn_roi = types.InlineKeyboardButton("–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å", callback_data="show_roi"); btn_ask_ai = types.InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É AI", callback_data="ask_ai"); btn_back_main = types.InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main"); keyboard.add(btn_advantages, btn_supply_chain, btn_integration, btn_roi); keyboard.add(btn_ask_ai); keyboard.add(btn_back_main); return keyboard
def create_cancel_keyboard(cancel_callback="back_to_main"): keyboard = types.InlineKeyboardMarkup(row_width=1); btn_cancel = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback); keyboard.add(btn_cancel); return keyboard
def create_back_to_questions_keyboard(): keyboard = types.InlineKeyboardMarkup(row_width=1); btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions"); keyboard.add(btn_back); return keyboard
def create_back_to_main_menu_keyboard(): keyboard = types.InlineKeyboardMarkup(row_width=1); btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"); keyboard.add(btn_back); return keyboard
def create_skip_preferences_keyboard(): keyboard = types.InlineKeyboardMarkup(row_width=1); btn_skip = types.InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="skip_logistics_preferences"); btn_cancel = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ (–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)", callback_data="back_to_main"); keyboard.add(btn_skip, btn_cancel); return keyboard

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (–¢–û–õ–¨–ö–û AI) ---
def analyze_logistics_with_ai(chat_id, loc1, loc2, preferences=None):
    processing_msg = bot.send_message(chat_id, texts["logistics_processing"])

    if not gemini_configured:
        bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=create_back_to_main_menu_keyboard())
        return

    user_preferences_text = f"\n*–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {preferences}" if preferences else "\n*–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* –ù–µ —É–∫–∞–∑–∞–Ω—ã."

    if preferences:
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –£–ß–ò–¢–´–í–ê–Ø –ü–û–ñ–ï–õ–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø.
        –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏. –í—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ *(–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ)*.
        –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤.

        *–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
        - –¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): {loc1.latitude}, {loc1.longitude}
        - –¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): {loc2.latitude}, {loc2.longitude}
        {user_preferences_text}

        *–ó–∞–¥–∞—á–∏:*
        1. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∏–¥ –Ω–∞–∑–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.
        2. –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –û–ë–©–£–Æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —ç—Ç–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º *(–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ)*. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞–∑–±–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–∏—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–µ–≥–æ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞), —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è/–∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è/–∞—Ä–µ–Ω–¥–∞, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ (–µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—à—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ).
        3. –û–ø–∏—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã, –∫–ª—é—á–µ–≤—ã–µ –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å).
        4. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –±–∞–∑–æ–≤–æ–µ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, - –∏–ª–∏ * –¥–ª—è —Å–ø–∏—Å–∫–æ–≤). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏.
        """
    else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —É–∫–∞–∑–∞–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞–π –†–ê–ó–ù–û–°–¢–û–†–û–ù–ù–ò–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏. –í—Å–µ —Ü–µ–Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ *(–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ)*.
        –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤.

        *–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
        - –¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): {loc1.latitude}, {loc1.longitude}
        - –¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): {loc2.latitude}, {loc2.longitude}

        *–ó–∞–¥–∞—á–∏:*
        1. –ü—Ä–µ–¥–ª–æ–∂–∏ –ù–ï–°–ö–û–õ–¨–ö–û –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞), –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –≥—Ä—É–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Ç–æ–Ω–Ω–∞, –Ω–µ —Ö—Ä—É–ø–∫–∏–π), —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:
           –∞) –ù–∞–∏–±–æ–ª–µ–µ –î–ï–®–ï–í–´–ô –≤–∞—Ä–∏–∞–Ω—Ç.
           –±) –ù–∞–∏–±–æ–ª–µ–µ –ë–´–°–¢–†–´–ô –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –¥–µ—à–µ–≤–æ–≥–æ).
           –≤) –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ë–ê–õ–ê–ù–° (–µ—Å–ª–∏ –µ—Å—Ç—å).
        2. –î–ª—è –ö–ê–ñ–î–û–ì–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –æ—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –û–ë–©–£–Æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ *(–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ)*. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞–∑–±–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —Ç–æ–ø–ª–∏–≤–æ (–∏—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–µ–≥–æ –æ—Ü–µ–Ω–æ—á–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è), –≤–æ–¥–∏—Ç–µ–ª—å/–∞—Ä–µ–Ω–¥–∞, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –¥–æ—Ä–æ–≥–∏.
        3. –î–ª—è –ö–ê–ñ–î–û–ì–û –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞—Ä—à—Ä—É—Ç (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã, –≥–æ—Ä–æ–¥–∞), –µ—Å–ª–∏ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å.
        4. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –±–∞–∑–æ–≤–æ–µ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, - –∏–ª–∏ * –¥–ª—è —Å–ø–∏—Å–∫–æ–≤). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏.
        """

    final_response_text = ""
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        safety_settings=[ {"category": c, "threshold": "BLOCK_MEDIUM_AND_ABOVE"} for c in ["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT"]]
        response = model.generate_content(prompt, safety_settings=safety_settings)

        if response.parts:
            final_response_text = response.text
        else:
            block_reason = response.prompt_feedback.block_reason if response.prompt_feedback else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            final_response_text = texts["logistics_error"] + f"\n(–ü—Ä–∏—á–∏–Ω–∞: –û—Ç–≤–µ—Ç AI –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω [{block_reason}] –∏–ª–∏ –ø—É—Å—Ç)"
    except Exception as e:
        print(f"Google AI (Gemini) API Error during logistics analysis: {e}")
        final_response_text = texts["logistics_error"]

    try:
        bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                              text=final_response_text,
                              reply_markup=create_back_to_main_menu_keyboard(),
                              parse_mode="Markdown") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –æ—Ç–≤–µ—Ç–∞ Gemini (logistics): {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        try:
            bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                  text=final_response_text,
                                  reply_markup=create_back_to_main_menu_keyboard(),
                                  parse_mode=None)
        except Exception as fallback_e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {fallback_e}")
            bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,text=texts["logistics_error"],reply_markup=create_back_to_main_menu_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    print(f"User {message.from_user.first_name} ({message.chat.id}) started the bot.")
    clear_user_state(message.chat.id); keyboard = create_main_menu_keyboard(); bot.send_message(message.chat.id, texts["welcome"], reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id; message_id = call.message.message_id; user_name = call.from_user.first_name; callback_data = call.data
    print(f"User {user_name} ({chat_id}) pressed button: {callback_data}"); bot.answer_callback_query(call.id)
    try:
        if callback_data == "ask_ai":
            if not gemini_configured: bot.answer_callback_query(call.id, "–°–µ—Ä–≤–∏—Å AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True); return
            set_user_state(chat_id, 'awaiting_ai_question'); keyboard = create_cancel_keyboard("back_to_questions"); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["ask_ai_prompt"], reply_markup=keyboard)

        elif callback_data == "show_questions": # <-- –ü–†–û–í–ï–†–ö–ê –≠–¢–û–ì–û –ë–õ–û–ö–ê
            clear_user_state(chat_id)
            keyboard = create_questions_menu_keyboard()
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –∏ parse_mode –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏
            bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["questions_menu"], reply_markup=keyboard, parse_mode=None) # –£–±—Ä–∞–ª–∏ parse_mode –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

        elif callback_data == "start_logistics":
            clear_user_state(chat_id); set_user_state(chat_id, 'awaiting_location_1'); user_data[chat_id] = {}; keyboard = create_cancel_keyboard("back_to_main"); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["ask_location_1"], reply_markup=keyboard)

        elif callback_data == "skip_logistics_preferences":
            if chat_id in user_data and 'loc1' in user_data[chat_id] and 'loc2' in user_data[chat_id]:
                loc1 = user_data[chat_id]['loc1']; loc2 = user_data[chat_id]['loc2']
                try: bot.delete_message(chat_id, message_id)
                except Exception as e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ skip_prefs: {e}")
                analyze_logistics_with_ai(chat_id, loc1, loc2, preferences=None)
                clear_user_state(chat_id) # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å, —Ç.–∫. analyze_logistics_with_ai –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å
            else: bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ –≥–µ–æ—Ç–æ—á–∫–∞—Ö –ø–æ—Ç–µ—Ä—è–Ω—ã...", reply_markup=create_main_menu_keyboard()); clear_user_state(chat_id)

        # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FAQ –° MARKDOWN ---
        elif callback_data == "show_advantages": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["advantages"], reply_markup=keyboard, parse_mode="Markdown")
        elif callback_data == "show_integration_steps": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["integration_steps"], reply_markup=keyboard, parse_mode="Markdown")
        elif callback_data == "show_supply_chain": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["supply_chain"], reply_markup=keyboard, parse_mode="Markdown")
        elif callback_data == "show_roi": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["roi"], reply_markup=keyboard, parse_mode="Markdown")
        # ------------------------------------

        elif callback_data == "back_to_questions": clear_user_state(chat_id); keyboard = create_questions_menu_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["questions_menu"], reply_markup=keyboard, parse_mode=None) # –£–±—Ä–∞–ª–∏ parse_mode
        elif callback_data == "back_to_main":
            clear_user_state(chat_id); keyboard = create_main_menu_keyboard()
            try: bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["welcome"], reply_markup=keyboard)
            except telebot.apihelper.ApiTelegramException as e:
                 if "message can't be edited" in str(e) or "message to edit not found" in str(e): bot.send_message(chat_id, texts["welcome"], reply_markup=keyboard)
                 else: print(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (edit): {e}"); bot.send_message(chat_id, texts["welcome"], reply_markup=keyboard)
    except telebot.apihelper.ApiTelegramException as e: print(f"–û—à–∏–±–∫–∞ API callback: {e}"); bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞ API.")
    except Exception as e: print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ callback: {e}"); bot.answer_callback_query(call.id, text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")


@bot.message_handler(content_types=['location'])
def handle_location(message):
    chat_id = message.chat.id; user_name = message.from_user.first_name; current_state = get_user_state(chat_id); location = message.location
    print(f"User {user_name} ({chat_id}) sent location: {location}. Current state: {current_state}")
    if current_state == 'awaiting_location_1':
        user_data[chat_id] = {'loc1': location}; set_user_state(chat_id, 'awaiting_location_2'); keyboard = create_cancel_keyboard("back_to_main")
        try:
             if message.reply_to_message: bot.delete_message(chat_id, message.reply_to_message.message_id)
        except Exception as del_err: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â.(1): {del_err}")
        bot.send_message(chat_id, texts["ask_location_2"], reply_markup=keyboard)
    elif current_state == 'awaiting_location_2':
        if chat_id in user_data and 'loc1' in user_data[chat_id]:
            user_data[chat_id]['loc2'] = location; print(f"Received loc2 for {chat_id}: {location}")
            set_user_state(chat_id, 'awaiting_logistics_preferences'); keyboard = create_skip_preferences_keyboard()
            try:
                if message.reply_to_message: bot.delete_message(chat_id, message.reply_to_message.message_id)
            except Exception as del_err: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â.(2): {del_err}")
            bot.send_message(chat_id, texts["ask_logistics_preferences"], reply_markup=keyboard)
        else: print(f"Error: State awaiting_location_2, but no loc1 found for chat {chat_id}"); bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –ø–æ—Ç–µ—Ä—è–Ω—ã...", reply_markup=create_main_menu_keyboard()); clear_user_state(chat_id); keyboard = create_main_menu_keyboard(); bot.send_message(message.chat.id, texts["welcome"], reply_markup=keyboard)
    else: bot.send_message(chat_id, texts["location_unexpected"])

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id; user_name = message.from_user.first_name; text = message.text; current_state = get_user_state(chat_id)
    print(f"User {user_name} ({chat_id}) sent text: '{text}'. Current state: {current_state}")
    if current_state == 'awaiting_ai_question':
        if not gemini_configured: bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å AI (Gemini) —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); clear_user_state(chat_id); keyboard = create_questions_menu_keyboard(); bot.send_message(chat_id, texts["questions_menu"], reply_markup=keyboard); return
        processing_msg = bot.reply_to(message, texts["ask_ai_processing"])
        try:
            model = genai.GenerativeModel('gemini-1.5-flash-latest');
            prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–∂–∏—Ä–Ω—ã–π*, _–∫—É—Ä—Å–∏–≤_, —Å–ø–∏—Å–∫–∏ —Å - –∏–ª–∏ *)."
            safety_settings=[ {"category": c, "threshold": "BLOCK_MEDIUM_AND_ABOVE"} for c in ["HARM_CATEGORY_HARASSMENT", "HARM_CATEGORY_HATE_SPEECH", "HARM_CATEGORY_SEXUALLY_EXPLICIT", "HARM_CATEGORY_DANGEROUS_CONTENT"]]
            response = model.generate_content(prompt, safety_settings=safety_settings)
            if response.parts: ai_response = response.text
            else: block_reason = response.prompt_feedback.block_reason if response.prompt_feedback else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"; ai_response = texts["ask_ai_error"] + f"\n(AI: [{block_reason}])"
            try: bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text=ai_response, reply_markup=create_back_to_questions_keyboard(), parse_mode="Markdown")
            except telebot.apihelper.ApiTelegramException as e_tg:
                 if "can't parse entities" in str(e_tg): print(f"Parse Markdown error (text_q): {e_tg}"); bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text=ai_response, reply_markup=create_back_to_questions_keyboard(), parse_mode=None)
                 else: print(f"TG API error (text_q): {e_tg}"); bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text=texts["ask_ai_error"], reply_markup=create_back_to_questions_keyboard())
        except Exception as e: print(f"Gemini API Error (text q): {e}"); bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text=texts["ask_ai_error"], reply_markup=create_back_to_questions_keyboard())
        finally: clear_user_state(chat_id)
    elif current_state == 'awaiting_logistics_preferences':
        if chat_id in user_data and 'loc1' in user_data[chat_id] and 'loc2' in user_data[chat_id]:
            loc1 = user_data[chat_id]['loc1']; loc2 = user_data[chat_id]['loc2']; user_preferences = text.strip()
            user_data[chat_id]['preferences'] = user_preferences
            try:
                 if message.reply_to_message: bot.delete_message(chat_id, message.reply_to_message.message_id)
            except Exception as e: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ask_prefs: {e}")
            analyze_logistics_with_ai(chat_id, loc1, loc2, preferences=user_preferences)
            clear_user_state(chat_id) # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–µ—Å—å
        else: bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ –≥–µ–æ—Ç–æ—á–∫–∞—Ö –ø–æ—Ç–µ—Ä—è–Ω—ã...", reply_markup=create_main_menu_keyboard()); clear_user_state(chat_id)
    elif current_state in ['awaiting_location_1', 'awaiting_location_2']: bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...")
    else: pass

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    while True:
        try: bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except telebot.apihelper.ApiTelegramException as e: print(f"TG API Error poll: {e}"); time.sleep(15)
        except requests.exceptions.RequestException as e: print(f"Network Error poll: {e}"); time.sleep(30)
        except Exception as e: print(f"Critical Error poll: {e}"); time.sleep(15)
        else: print("Polling stopped."); break
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
